<?php

namespace Api\V1\Http\Controllers;

use Api\V1\Http\Controllers\Traits\CommentControllerTrait;
use Api\V1\Models\User;
use Api\V1\Services\UserTipService;
use Illuminate\Http\Request;
use Traits\Controllers\Api\EmotionControllerTrait;

class UserTipController extends BaseController
{
    use EmotionControllerTrait, CommentControllerTrait;

    /**
     * @var UserTipService
     */
    protected $service;

    /**
     * @param Request $request
     * @param null $method
     * @return \Illuminate\Http\JsonResponse
     */
    public function indexTransformBy(Request $request, $method = null)
    {
        $data = $request->all();
        $data['with_count'][] = 'emotions';
        $data['with_count'][] = 'comments';
        $data['with']['emotions'] = [
            'columns' => [
                'emotions.id',
                'emotions.name',
                'emotions.image_path',
            ],
//            'group_by' => 'emotion_id',
            'order_by' => 'position'
        ];
        $data['with']['event'] = [
            'columns' => [
                'id',
                'start_date',
            ],
        ];
        $data['with']['user']['columns'] = 'id,name,profile_disk,profile_path';
        if ($this->getAuthId()) {
            $data['with']['user']['select_raw'] = 'exists(select id from `followers` where `following_user_id` = users.id and `follower_user_id` = '. $this->getAuthId() .') as is_follow';
        }
// @TODO improve
        $request->merge($data);
        return parent::indexTransformBy($request, $method); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function show(Request $request, $id)
    {
        $data['with_count'][] = 'emotions';
        $data['with_count'][] = 'comments';
        $data['with']['emotions'] = [
            'columns' => [
                'emotions.id',
                'emotions.name',
                'emotions.image_path',
            ],
//            'group_by' => 'emotion_id',
            'order_by' => 'position'
        ];
        $data['with']['event'] = [
            'columns' => [
                'id',
                'start_date',
            ],
        ];
        $data['with']['user']['columns'] = 'id,name,profile_disk,profile_path';
        if ($this->getAuthId()) {
            $data['with']['user']['select_raw'] = 'exists(select id from `followers` where `following_user_id` = users.id and `follower_user_id` = '. $this->getAuthId() .') as is_follow';
        }
        $request->merge($data);
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param $userId
     * @return \Illuminate\Http\JsonResponse
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function userTips(Request $request, $userId)
    {
        $data = [
            'where' => [
                'user_id' => $userId
            ],
        ];
        $request->merge($data);
        return $this->indexTransformBy($request);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function authFollowerActiveTips(Request $request)
    {
       return $this->userFollowersActiveTips($request, $this->getAuthId());
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function authFollowerEndedTips(Request $request)
    {
       return $this->userFollowersEndedTips($request, $this->getAuthId());
    }

    /**
     * @param Request $request
     * @param $userId
     * @return \Illuminate\Http\JsonResponse
     */
    public function userFollowersActiveTips(Request $request, $userId)
    {
        $user = User::with('followings')->find($userId, 'id');
        if (empty($user)) {
            return $this->response->notFoundItem($request, \ConstErrorCodes::NOT_FOUND, 'user Not found');
        }
        $followsIds = $user->followings()->pluck('following_user_id')->unique();

        $data = [
            'where_in' => [
                'result_validation' => [
                    \ConstUserTipResultValidationStatus::NOT_VALIDATED,
                    \ConstUserTipResultValidationStatus::VALIDATION_ERROR
                ],
                'user_id' => $followsIds
            ],
            'has' => 'user',
            'order_by' => [
                'id' => 'desc',
            ],
            'with' => [
                'user' => ['select' => 'id,name,profile_disk,profile_path']
            ],
            'columns' => [
                'provider',
                'user_id',
                'event_id',
                'odds_provider_id',
                'sport_readable_id',
                'home_name',
                'away_name',
                'event_started_at',
                'league_name',
                'odds_type_name',
                'odds_name',
                'odds',
                'tip_amount',
                'id',
                'home_id',
                'away_id',
            ],
        ];
        if ($this->getAuthId()) {
            $data['with']['user']['select_raw'] = 'exists(select id from `followers` where `following_user_id` = users.id and `follower_user_id` = '. $this->getAuthId() .') as is_follow';
        }
        $request->merge($data);
        return $this->indexTransformBy($request);
    }

    /**
     * @param Request $request
     * @param $userId
     * @return \Illuminate\Http\JsonResponse
     */
    public function userFollowersEndedTips(Request $request, $userId)
    {
        $user = User::with('followings')->find($userId, 'id');
        if (empty($user)) {
            $code = config('laraarea_api.error_codes.not_found');
            return $this->response->notFoundItem($request, $code, 'user Not found');
        }
        $followsIds = $user->followings()->pluck('following_user_id')->unique();

        $data = [
            'where_in' => [
                'result_validation' => [
                    \ConstUserTipResultValidationStatus::VALIDATED,
                ],
                'user_id' => $followsIds
            ],
            'has' => 'user',
            'order_by' => [
                'id' => 'desc',
            ],
            'with' => [
                'user' => ['select' => 'id,name,profile_disk,profile_path']
            ],
            'columns' => [
                'provider',
                'user_id',
                'event_id',
                'odds_provider_id',
                'sport_readable_id',
                'home_name',
                'away_name',
                'event_started_at',
                'league_name',
                'odds_type_name',
                'odds_name',
                'odds',
                'tip_amount',
                'id',
                'home_id',
                'away_id',
            ],
        ];
        if ($this->getAuthId()) {
            $data['with']['user']['select_raw'] = 'exists(select id from `followers` where `following_user_id` = users.id and `follower_user_id` = '. $this->getAuthId() .') as is_follow';
        }
        $request->merge($data);
        return $this->indexTransformBy($request);
    }

    /**
     * @param Request $request
     * @param $userId
     * @return \Illuminate\Http\JsonResponse
     */
    public function userEndedTips(Request $request, $userId)
    {
        $data = [
            'where' => [
                'user_id' => $userId,
                ['point', '!=', 0],
                'result_validation' => \ConstUserTipResultValidationStatus::VALIDATED
            ],
            'order_by' => [
                'id' => 'desc',
            ],
            'with' => ['user:id,name,profile_disk,profile_path'],
            'columns' => [
                'provider',
                'user_id',
                'event_id',
                'odds_provider_id',
                'sport_readable_id',
                'home_name',
                'away_name',
                'event_started_at',
                'league_name',
                'odds_type_name',
                'odds_name',
                'odds',
                'tip_amount',
                'id',
                'home_id',
                'away_id',
                'result_status'
            ],
        ];

        $data['with']['event'] = [
            'columns' => [
                'id',
                'start_date',
            ],
        ];
        $request->merge($data);
        return parent::index($request);
    }

    /**
     * @param Request $request
     * @param $userId
     * @return \Illuminate\Http\JsonResponse
     */
    public function userActiveTips(Request $request, $userId)
    {
        $data = [
            'where' => [
                'user_id' => $userId,
            ],
            'where_in' => [
                'result_validation' => [
                    \ConstUserTipResultValidationStatus::NOT_VALIDATED,
                    \ConstUserTipResultValidationStatus::VALIDATION_ERROR
                ]
            ],
            'order_by' => [
                'id' => 'desc',
            ],
            'with' => [
                'user:id,name,profile_disk,profile_path'
            ],
            'columns' => [
                'provider',
                'user_id',
                'event_id',
                'odds_provider_id',
                'sport_readable_id',
                'home_name',
                'away_name',
                'event_started_at',
                'league_name',
                'odds_type_name',
                'odds_name',
                'odds',
                'tip_amount',
                'id',
                'home_id',
                'away_id',
            ],
        ];
        $data['with']['event'] = [
            'columns' => [
                'id',
                'start_date',
            ],
        ];
        $request->merge($data);
        return parent::index($request);
    }

    /**
     * @param Request $request
     * @param $eventId
     * @return \Illuminate\Http\JsonResponse
     */
    public function eventTips(Request $request, $eventId)
    {
        $data = [
            'where' => [
                'event_id' => $eventId,
            ],
        ];
        $request->merge($data);
        return $this->indexTransformBy($request);
    }
}
