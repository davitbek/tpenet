<?php

namespace Api\V1\Http\Controllers\Enet;

use Api\V1\Transformers\Enet\EnetCountryTransformer;
use Illuminate\Http\Request;

class EnetCountryController  extends BaseController
{
    /**
     * @var EnetCountryTransformer
     */
    protected $transformer;

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function index(Request $request)
    {
        $data['order_by']['name'] = 'asc';
        $data['all'] = true;
        $data['columns']= [
            'name',
            'id',
            'readable_id',
        ];
        $request->merge($data);
        return parent::index($request); // TODO: Change the autogenerated stub
    }


    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function all(Request $request)
    {
        $countries = get_cached_countries();
        $countries = $countries->sortBy('country');
        $response = $this->transformer->transform($countries, $request, 'transformSimple');
        return $this->response->success($response);
    }

    /**
     *
     */
    public function countriesList()
    {
        $countries = get_cached_countries();
        return $countries->pluck('country', 'id')->sort()->all();
    }

    /**
     *
     */
    public function countriesIsoList()
    {
        $countries = get_cached_countries();
        return $countries->pluck('country', 'iso2')->sort()->all();
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function default(Request $request)
    {
        $item = get_country_by_ip($request->getClientIp());
        $response = $this->transformer->transform($item, $request, 'transformDetailed');
        return $this->response->success($response);
    }

    /**
     * @param Request $request
     * @param $ip
     * @return \Illuminate\Http\JsonResponse
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function byIp(Request $request, $ip)
    {
        $item = get_country_by_ip($ip);
        $response = $this->transformer->transform($item, $request, 'transformDetailed');
        return $this->response->success($response);
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function byId(Request $request, $id)
    {
        if (is_numeric($id)) {
            $item = get_country_by_id($id);
        } else {
            $item = get_country_by_ip($id);
        }

        $response = $this->transformer->transform($item, $request, 'transformDetailed');
        return $this->response->success($response);
    }
}
