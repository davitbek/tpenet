<?php

namespace Api\V1\Models\Enet;

/**
 * Class EnetEventParticipant
 *
 * @package Api\V1\Models\Enet
 * @property int $id
 * @property int|null $event_id
 * @property int|null $participant_id
 * @property int|null $number
 * @property int|null $n
 * @property int $is_deleted
 * @property string|null $del
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Api\V1\Models\Enet\EnetEvent|null $event
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Enet\EnetLineup[] $event_participant_lineups
 * @property-read int|null $event_participant_lineups_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Enet\EnetResult[] $event_participant_results
 * @property-read int|null $event_participant_results_count
 * @property-read \Api\V1\Models\Enet\EnetResult|null $final_result
 * @property-read \Api\V1\Models\Enet\EnetResult|null $final_score_result
 * @property-read mixed $cacheable_timestamp
 * @property-read mixed $formation_property
 * @property-read mixed $url_by
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Enet\EnetIncident[] $incidents
 * @property-read int|null $incidents_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Enet\EnetLineup[] $lineups
 * @property-read int|null $lineups_count
 * @property-read \Api\V1\Models\Enet\EnetParticipant|null $participant
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Enet\EnetProperty[] $properties
 * @property-read int|null $properties_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Enet\EnetResult[] $results
 * @property-read int|null $results_count
 * @property-read \Api\V1\Models\Enet\EnetResult|null $running_score_result
 * @property-read \Api\V1\Models\Enet\EnetStanding|null $standings
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant query()
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereDel($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereEventId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereIsDeleted($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereN($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereNumber($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereParticipantId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetEventParticipant whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class EnetEventParticipant extends BaseModel
{
//    use SoftDeletes;

    protected $table = 'enet_event_participants';

    public $fillable = [
        'id',
        'event_id',
        'participant_id',
        'number',
        'n',
        'ut',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::saving(function (self $item) {
            if ($item->number == 1) {
                $event = EnetEvent::find($item->event_id, ['id', 'event_first_participants_id', 'first_participant_id']);
                if (! empty($event)) {
                    $event->event_first_participants_id = $item->id;
                    $event->first_participant_id = $item->participant_id;
                    $event->save();
                }
            }
            if ($item->number == 2) {
                $event = EnetEvent::find($item->event_id, ['id', 'event_second_participants_id', 'second_participant_id']);
                if (! empty($event)) {
                    $event->event_second_participants_id = $item->id;
                    $event->second_participant_id = $item->participant_id;
                    $event->save();
                }
            }
        });
    }

    public function participant()
    {
        return $this->belongsTo(EnetParticipant::class, 'participant_id');
    }

    public function event()
    {
        return $this->belongsTo(EnetEvent::class, 'event_id');
    }

    public function results()
    {
        return $this->hasMany(EnetResult::class, 'event_participants_id');
    }

    public function lineups()
    {
        return $this->hasMany(EnetLineup::class, 'event_participants_id');
    }

    public function running_score_result()
    {
        return $this->hasOne(EnetResult::class, 'event_participants_id')
            ->where('result_code', \ConstEnetResultCode::RunningScore)
            ->where('is_deleted', \ConstYesNo::NO)
            ->select(['event_participants_id', 'value']);
    }

    public function final_result()
    {
        return $this->hasOne(EnetResult::class, 'event_participants_id')
            ->where('result_code', \ConstEnetResultCode::RunningScore)
            ->where('is_deleted', \ConstYesNo::NO)
            ->select(['event_participants_id', 'value']);
    }

    public function final_score_result()
    {
        return $this->hasOne(EnetResult::class, 'event_participants_id')->where('enet_results.result_code', 'finalresult');
    }

    public function incidents()
    {
        return $this->hasMany(EnetIncident::class, 'event_participants_id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function standings()
    {
        return $this->hasOne(EnetStanding::class, 'object_id')->where('object', \ConstEnetObjectType::EVENT_PARTICIPANTS);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function properties()
    {
        return $this->hasMany(EnetProperty::class, 'object_id')->where('object', 'event_participant');
    }

    public function event_participant_results()
    {
        return $this->hasMany(EnetResult::class, 'event_participants_id');
    }

    public function event_participant_lineups()
    {
        return $this->hasMany(EnetLineup::class, 'event_participants_id');
    }

    public function getFormationPropertyAttribute()
    {
        return $this->event_participant_properties->where('name', 'formation')->first()->value ?? null;
    }

}
