<?php

namespace Api\V1\Models\Enet;

use App\Jobs\Enet\MakeImage;

/**
 * Class EnetImage
 *
 * @package Api\V1\Models\Enet
 * @property int $id
 * @property string $object
 * @property int $object_id
 * @property string $type
 * @property string $contenttype
 * @property string $name
 * @property string $value
 * @property int $is_deleted
 * @property int $n
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read mixed $cacheable_timestamp
 * @property-read mixed $url_by
 * @property-read \Api\V1\Models\Enet\EnetParticipant $participant
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage query()
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereContenttype($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereIsDeleted($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereN($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereObject($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereObjectId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|EnetImage whereValue($value)
 * @mixin \Eloquent
 */
class EnetImage extends BaseModel
{

    protected $table = 'enet_images';

    public $fillable = [
        'id',
        'object',
        'object_id',
        'type',
        'contenttype',
        'name',
        'image_disk',
        'image_path',
        'value',
        'is_deleted',
        'n',
        'ut',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::saved(function ($item) {
            if ($item->value) {
                dispatch( new MakeImage($item));
            }
        });
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function participant()
    {
        return $this->belongsTo(EnetParticipant::class, 'object_id');
    }

    /**
     * @return mixed|string
     */
    public function getImageUrlAttribute()
    {
        return $this->getUrlByAttribute('image_path') ?? self::getDefaultShirtImageUrl();
    }

    /**
     * @return string
     */
    public static function getDefaultShirtImageUrl()
    {
        return \Storage::disk('s3')->url('teams/default-shirt.gif');
    }

    /**
     * @param $attribute
     * @param null $rootPath
     * @return string
     */
    public function getUploadFolderPath($attribute, $rootPath = null)
    {
        return '';
    }

}
