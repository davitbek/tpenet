<?php

namespace Api\V1\Models;

use Api\V1\Models\Traits\EmotionAbleTrait;

/**
 * Class Comment
 *
 * @package Api\V1\Models
 * @property int $id
 * @property int|null $parent_id
 * @property int $user_id
 * @property int|null $commentable_id
 * @property string|null $commentable_type
 * @property string $comment
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Emotionable[] $emotionables
 * @property-read int|null $emotionables_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\Api\V1\Models\Emotion[] $emotions
 * @property-read int|null $emotions_count
 * @property-read mixed $cacheable_timestamp
 * @property-read mixed $emotions_grouped
 * @property-read mixed $url_by
 * @property-read \Illuminate\Database\Eloquent\Collection|Comment[] $sub_comments
 * @property-read int|null $sub_comments_count
 * @property-read \Api\V1\Models\User $user
 * @method static \Illuminate\Database\Eloquent\Builder|Comment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment query()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereComment($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereCommentableId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereCommentableType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereParentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereUserId($value)
 * @mixin \Eloquent
 */
class Comment extends BaseModel
{
    use EmotionAbleTrait;

    public $fillable = [
        'parent_id',
        'user_id',
        'commentable_id',
        'commentable_type',
        'comment',
    ];

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::deleting(function ($comment) {
            $comment->sub_comments()->delete();
        });
    }

    /**
     * @return \Illuminate\Config\Repository|mixed
     */
    public function getPermittedCommentableTypes()
    {
        $permittedCommentableTypes = config('codearea_comments.models');
        foreach (config('codearea_comments.commentable_types') as $model) {
            $permittedCommentableTypes[$model] = (new $model)->getMorphClass();
        }
        $permittedCommentableTypes = array_unique($permittedCommentableTypes);
        return $permittedCommentableTypes;
    }

    public function sub_comments()
    {
        return $this->hasMany(self::class, 'parent_id');
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }


}
