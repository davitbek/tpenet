<?php

namespace Api\V1\Transformers\Enet;

use Api\V1\Models\Enet\EnetCountry;
use Api\V1\Models\Enet\EnetParticipant;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;

class EnetParticipantTransformer extends BaseTransformer
{
    /**
     * @param $resource
     * @param Request|null $request
     * @param null $method
     * @return array|mixed
     */
    public function transform($resource, ?Request $request = null, $method = null)
    {
        if (is_null($resource)) {
            return [];
        }

        return parent::transform($resource, $request, $method); // TODO: Change the autogenerated stub
    }

    /**
     * @param EnetParticipant $enetParticipant
     * @return array
     */
    public function transformTeams(EnetParticipant $enetParticipant)
    {
        $response = [
            'id' => $enetParticipant->id,
            'name' => $enetParticipant->name_translated,
            'short_name' => $enetParticipant->short_name_translated,
            'image_url' => $enetParticipant->image_url,
            'gender' => $enetParticipant->gender,
            'type' => $enetParticipant->type,
            'sport_id' => $enetParticipant->sport_id,
        ];

        return $response;
    }

    /**
     * @param EnetParticipant $enetParticipant
     * @return array
     */
    public function transformTeam(EnetParticipant $enetParticipant)
    {
        $response = [
            'id' => $enetParticipant->id,
            'name' => $enetParticipant->name_translated,
            'image_url' => $enetParticipant->image_url,
            'gender' => $enetParticipant->gender,
            'country' => $enetParticipant->country->name ?? 'International',
            'country_url' => $enetParticipant->country->image_url ?? EnetCountry::defaultUploadUrl('image_path'),
            'coach' => $enetParticipant->coach->participant->name_translated ?? '',
            'website' => $enetParticipant->properties->where('name', 'HomePage')->first()->value ?? '',
            'is_favorite' => (bool)$enetParticipant->is_favorite
        ];

        return $response;
    }

    /**
     * @param EnetParticipant $enetParticipant
     * @return array
     */
    public function transformAthletes(EnetParticipant $enetParticipant)
    {
        $response = [
            'id' => $enetParticipant->id,
            'name' => $enetParticipant->name_translated,
            'short_name' => $enetParticipant->short_name_translated,
            'image_url' => $enetParticipant->image_url,
            'gender' => $enetParticipant->gender,
            'type' => $enetParticipant->type,
            'sport_id' => $enetParticipant->sport_id,
        ];

        return $response;
    }


    /**
     * @param EnetParticipant $enetParticipant
     * @return array
     */
    public function transformAthlete(EnetParticipant $enetParticipant)
    {
        $birthDay =  $enetParticipant->properties->where('name', 'date_of_birth')->first()->value ?? '';
        $height = $enetParticipant->properties->where('name', 'height')->first()->value ?? '';
        $weight = $enetParticipant->properties->where('name', 'weight')->first()->value ?? '';
        $prop = ['height', 'weight', 'date_of_birth'];
        $response = [
            'id' => $enetParticipant->id,
            'name' => $enetParticipant->name_translated,
            'image_url' => $enetParticipant->image_url,
            'gender' => $enetParticipant->gender,
            'country' => $enetParticipant->country->name ?? 'International',
            'country_url' => $enetParticipant->country->image_url ?? EnetCountry::defaultUploadUrl('image_path'),
            'height' => $height ? $height . ' cm' : '',
            'weight' => $weight ? $weight . ' kg' : '',
            'date_of_birth' => $birthDay,
            'age' => $birthDay ? Carbon::parse($birthDay)->diffInYears() : '',
            'properties' => $enetParticipant->properties->whereNotIn('name', $prop)->pluck('value', 'name'),
            'is_favorite' => (bool)$enetParticipant->is_favorite
        ];

        return $response;
    }

    public function transformTeamParticipants(Collection $items)
    {
        $items = $items->filter(function ($item) {
            return $item->participant;
        });
        return $items->groupBy(function ($item) {
            if (\ConstParticipantType::Athlete != $item->participant_type) {
                return $item->participant_type;
            }
            $position = $item->participant->properties->where('name', 'position')->first();
            return $position->value ?? '';
        })->map(function ($items, $position) {
            return [
                'position' => $position,
                'participants' => $this->transformTeamParticipantsBy($items, $position),
            ];
        })->values();
    }

    /**
     * @param $items
     * @param $position
     * @return mixed
     */
    protected function transformTeamParticipantsBy($items, $position)
    {
        return $items->map(function ($item) {
            $participant = $item->participant;
            return [
                'id' => $item->id,
                'date_from' => $item->date_from,
                'date_to' => $item->date_to,
                'gender' => $participant->gender,
                'name' => $participant->name_translated,
                'country_url' => $participant->country->image_url ?? EnetCountry::defaultUploadUrl('image_path'),
                'properties' => $participant->properties->where('name', '!=', 'position')->pluck('value', 'name')
           ];
        });
    }

    /**
     * @param $item
     * @return array
     */
    public function transformAthleteTeams($item)
    {
        $team = $item->team;
        return [
            'id' => $item->id,
            'date_from' => $item->date_from,
            'date_to' => $item->date_to,
            'gender' => $team->gender ?? '',
            'name' => $team->name_translated,
            'country_url' => $team->country->image_url ?? EnetCountry::defaultUploadUrl('image_path'),
            'properties' => $team ? $team->properties->where('name', '!=', 'position')->pluck('value', 'name') : []
        ];
    }
}
