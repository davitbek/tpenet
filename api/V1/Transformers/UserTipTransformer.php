<?php

namespace Api\V1\Transformers;

use Api\V1\Models\UserTip;
use App\Facades\AppCache;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Auth;

class UserTipTransformer extends BaseTransformer
{
    public function transform($resource, ?Request $request = null, $method = null)
    {
        if (is_a($resource, LengthAwarePaginator::class)) {
            $items = $resource->where('provider', \ConstProviders::ENETPULSE);
            $items->load([
                'home_team:id,image_disk,image_path,name,name_en,name_da',
                'away_team:id,image_disk,image_path,name,name_en,name_da',
            ]);
        }
        return parent::transform($resource, $request, $method); // TODO: Change the autogenerated stub
    }

    /**
     * @param UserTip $model
     * @param Request|null $request
     * @return mixed
     */
    public function toArray($model, ? Request $request = null)
    {
        if ((\ConstProviders::ENETPULSE == $model->provider)) {
            $startDateTime = $model->event->start_date_timezone ?? $model->start_date_timezone;
        } else {
            $startDateTime = $model->start_date_timezone;
        }

        return [
            'tip_id' => $model->id,
            'provider' => $model->provider,
            'user_id' => $model->user_id,
            'user_name' => $model->user->name ?? 'User deleted',
            'follow_status' => AppCache::isFollow($model->user),
            'event_id' => $model->event_id,
            'game_style' => $model->sport_readable_id,
            'home_name' => $model->home_name_translated,
            'away_name' => $model->away_name_translated,
            'start_date_time' => $startDateTime->toDateTimeString(),
            'league_name' => $model->league_name,
            'market_style' => $model->odds_type_name,
            'odd_style' => $model->odds_name,
            'odd' => $model->odds,
            'odds_fraction' => float2fraction( $model->odds),
            'tip_amount' => number_format($model->tip_amount),
            'profile_url' => $model->user->profile_url ?? get_profile_white_url(),
            'home_image_url' => $model->home_image_url,
            'away_image_url' => $model->away_image_url,
            'result_status' => $this->whenNotNull($model->result_status),
            'comments_count' => $this->whenNotNull($model->comments_count),
            'emotions_count' => $this->whenNotNull($model->emotions_count),
            'emotions' => $this->when($model->emotions, (new EmotionTransformer())->transformCollectionWithCount($model->emotions, $request)),
            'reacted_emotion_id' => (int) ($model->emotions->where('pivot.user_id', Auth::guard('api')->id())->first()->id ?? null),
            'betting_offer' => get_betting_offer($model->odds_provider_id)
        ];
    }
}
